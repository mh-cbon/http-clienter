package main

// file generated by
// github.com/mh-cbon/http-clienter
// do not edit

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/gorilla/mux"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// HTTPClientController is an http-clienter of *Controller.
// Controller of some resources.
type HTTPClientController struct {
	router *mux.Router
	Base   string
}

// NewHTTPClientController constructs an http-clienter of *Controller
func NewHTTPClientController(router *mux.Router) *HTTPClientController {
	ret := &HTTPClientController{
		router: router,
	}
	return ret
}

// GetByID constructs a request to /{id}
func (t HTTPClientController) GetByID(urlID int) (*http.Request, error) {
	var ret *http.Request
	var body io.Reader
	// var err error

	surl := "/{id}"
	surl = strings.Replace(surl, "{id}", fmt.Sprintf("%v", urlID), 1)
	url, URLerr := url.ParseRequestURI(surl)
	if URLerr != nil {
		return nil, URLerr
	}
	finalURL := url.String()
	finalURL = fmt.Sprintf("%v%v", t.Base, finalURL)

	req, reqErr := http.NewRequest("GET", finalURL, body)
	if reqErr != nil {
		return nil, reqErr
	}
	ret = req

	return ret, nil
}

// UpdateByID constructs a request to /{id}
func (t HTTPClientController) UpdateByID(urlID int, reqBody *Tomate) (*http.Request, error) {
	var ret *http.Request
	var body io.Reader
	// var err error

	data, reqBodyErr := json.Marshal(reqBody)
	if reqBodyErr != nil {
		return nil, reqBodyErr
	}

	body = bytes.NewBuffer(data)
	surl := "/{id}"
	surl = strings.Replace(surl, "{id}", fmt.Sprintf("%v", urlID), 1)
	url, URLerr := url.ParseRequestURI(surl)
	if URLerr != nil {
		return nil, URLerr
	}
	finalURL := url.String()
	finalURL = fmt.Sprintf("%v%v", t.Base, finalURL)

	req, reqErr := http.NewRequest("GET", finalURL, body)
	if reqErr != nil {
		return nil, reqErr
	}
	ret = req

	return ret, nil
}

// DeleteByID constructs a request to /{id}
func (t HTTPClientController) DeleteByID(REQid int) (*http.Request, error) {
	var ret *http.Request
	var body io.Reader
	// var err error

	surl := "/{id}"
	surl = strings.Replace(surl, "{id}", fmt.Sprintf("%v", REQid), 1)
	url, URLerr := url.ParseRequestURI(surl)
	if URLerr != nil {
		return nil, URLerr
	}
	finalURL := url.String()
	finalURL = fmt.Sprintf("%v%v", t.Base, finalURL)

	req, reqErr := http.NewRequest("GET", finalURL, body)
	if reqErr != nil {
		return nil, reqErr
	}
	ret = req

	return ret, nil
}
